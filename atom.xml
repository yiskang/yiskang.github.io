<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[13筆記]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yiskang.github.io/"/>
  <updated>2015-04-29T10:03:28.220Z</updated>
  <id>http://yiskang.github.io/</id>
  
  <author>
    <name><![CDATA[康益昇]]></name>
    <email><![CDATA[M9805508@mail.ntust.edu.tw]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[在 Terminal 開啟 Sublime]]></title>
    <link href="http://yiskang.github.io/2015/04/29/%E5%9C%A8Terminal%E9%96%8B%E5%95%9FSublime/"/>
    <id>http://yiskang.github.io/2015/04/29/在Terminal開啟Sublime/</id>
    <published>2015-04-29T09:14:54.000Z</published>
    <updated>2015-04-29T10:03:28.220Z</updated>
    <content type="html"><![CDATA[<p>開使用 Hexo 寫筆記以後，常常都要先 hexo new 一則文章，在用 vim 開啟他。然後問題就來了，我很多時候都要在文章裡面貼上程式碼的內容，但因為我有開啟 vim 的自動縮排功能，直接貼上去後，程式碼就會被縮排縮到找不到內文，自作孽啊… 囧rz</p>
<p>就因為這樣我想找個類似 UltraEdit 的軟體來用，然後聽說 Sublime 似乎不錯，但每次開啟 Hexo 的 Markdown 檔案都要做拖拉的動作，這時候我的懶毛病就犯了！好我想讓 Sublime 跟 vim 一樣可以直接在 Terminal 開啟文章的 md 檔，那要怎麼做呢？以下就是我所做的設定：</p>
<ol>
<li><p>先測試可不可以直接啟動 Sublime</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /Applications/Sublime\ Text\ <span class="number">2</span>.app/Contents/SharedSupport/bin/subl</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果可以的話，現在為 Sublime 建立一個 alias：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> sublime=<span class="string">"/Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然後把他加到 shell 的 rc 檔裡面，以下以 zsh 為例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'alias sublime="/Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl"'</span> &gt; ~/.zshrc</span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>開使用 Hexo 寫筆記以後，常常都要先 hexo new 一則文章，在用 vim 開啟他。然後問題就來了，我很多時候都要在文章裡面貼上程式碼的內容，但因為我有開啟 vim 的自動縮排功能，直接貼上去後，程式碼就會被縮排縮到找不到內文，自作孽啊… 囧rz</p>
<p>就因]]>
    </summary>
    
      <category term="Hexo" scheme="http://yiskang.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git submodule 介紹]]></title>
    <link href="http://yiskang.github.io/2015/04/16/git-submodule/"/>
    <id>http://yiskang.github.io/2015/04/16/git-submodule/</id>
    <published>2015-04-16T05:46:36.000Z</published>
    <updated>2015-04-17T02:44:47.800Z</updated>
    <content type="html"><![CDATA[<h3 id="簡介">簡介</h3><p>最近為了方便管理專案，將他拆成了好幾個小專案來維護，然後透過參考引入想要的檔案。但 git 沒辦法像 SVN 那樣只單獨下載一個檔案，它必需整個 repository 都 clone 下來，可是整個 clone 下來還要把想要的檔案分別丟到對的位置，這樣好像太麻煩了，還好 git 有提供 submodule 這個機制可以用來做外部資源參考與更新，解救了我這個懶人～～～ XD</p>
<h3 id="新增_submodule">新增 submodule</h3><p>指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add &#123;repository&#125;      &#123;path/folder name&#125;</span><br></pre></td></tr></table></figure></p>
<p>範例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://github.com/yiskang/hexo-theme-pure.git  theme/pure</span><br></pre></td></tr></table></figure></p>
<p><b>注意：</b>在下新增指令前，請注意<span style="color:red;font-wegiht:bold;"> {path/folder name} </span>的部份，先不要新增空目錄，git 自己會新增，不然 會產生衝突，submodule 就會無法新增。<b>不需要為 submodule 建立目錄</b></p>
<p>新增完後會看到類似下面的內容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cloning into <span class="string">'theme/pure'</span>...</span><br><span class="line">remote: Counting objects: <span class="number">202</span>, done.</span><br><span class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">27</span>/<span class="number">27</span>), done.</span><br><span class="line">remote: Total <span class="number">202</span> (delta <span class="number">14</span>), reused <span class="number">0</span> (delta <span class="number">0</span>), pack-reused <span class="number">175</span></span><br><span class="line">Receiving objects: <span class="number">100</span>% (<span class="number">202</span>/<span class="number">202</span>), <span class="number">49.48</span> KiB | <span class="number">0</span> bytes/s, done.</span><br><span class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">84</span>/<span class="number">84</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure></p>
<p>這時候輸入 <code>git status</code> ，就會發現多了兩檔案需要 commit:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line">Initial commit</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line">      new file:   .gitmodules</span><br><span class="line">      new file:   theme/pure</span><br></pre></td></tr></table></figure></p>
<p>此外，git 會將 submodule 的資訊記錄在 .gitmodules 裡面:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[submodule <span class="string">"theme/pure"</span>]</span><br><span class="line">      path = theme/pure</span><br><span class="line">      url = https://github.com/yiskang/hexo-theme-pure.git</span><br></pre></td></tr></table></figure></p>
<p>最後記得要 commit :<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"Add submodule pure theme"</span></span><br></pre></td></tr></table></figure></p>
<h3 id="更新_submodule">更新 submodule</h3><p>每個 submodule 獨自更新：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &#123;module folder&#125;</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure></p>
<p>但我很懶的，都用這個直接更新整個專案的 submodule<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule foreach git pull</span><br></pre></td></tr></table></figure></p>
<h3 id="下載有_submodule_的_repository">下載有 submodule 的 repository</h3><p>下載 remote repository 到 local 端：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yiskang/Blog.git</span><br></pre></td></tr></table></figure></p>
<p>註冊 submodule 到 .gitmodules ，告訴 git 要新增哪些 modules<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule init</span><br></pre></td></tr></table></figure></p>
<p>將 submodule 的內容下載下來：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update</span><br></pre></td></tr></table></figure></p>
<h3 id="移除_submodule">移除 submodule</h3><p>如果不要想使用某個 submodule 了，要移除它要怎麼做呢？我們可以透過下面的步驟將它移除，但在移除前還有一些動作要做！移除 submodule 時得告訴 git 你要移除的 module 名稱，這名稱要去哪找？透過 .gitmodules 就可以啦，在新增 submodule 時，git就將它記錄在 .gitmodules 裡了。那假設現在要移除 pure theme module，我們可以在 .gitmodules 找到這樣的描述：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[submodule <span class="string">"theme/pure"</span>]</span><br><span class="line">      path = theme/pure</span><br><span class="line">      url = https://github.com/yiskang/hexo-theme-pure.git</span><br></pre></td></tr></table></figure></p>
<p>module 明稱就是上面的 path，現在要移除 pure theme module，所以就是 theme/pure。 接著就可以開始進行移除了，移除 submodule 的命令就是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git submodule deinit &#123;path/folder name&#125;</span><br><span class="line">git rm &#123;path/folder name&#125;     or  git rm --chched &#123;path/folder name&#125;</span><br></pre></td></tr></table></figure></p>
<p>現在要將 pure theme module 移除，將上面的 {path/folder name} 換成 theme/pure：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先移除 submodule 裡面的內容</span></span><br><span class="line">git submodule deinit theme/pure</span><br><span class="line"><span class="comment"># 移除資料夾</span></span><br><span class="line">git rm theme/pure</span><br><span class="line"><span class="comment"># 或者你不想留下先前的修改記錄，要將它從 Woking Tree 移除</span></span><br><span class="line">git rm --cached theme/pure</span><br></pre></td></tr></table></figure></p>
<p>移除完以後，可以從 git status 看到：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line">      modified:   .gitmodules</span><br><span class="line">      deleted:    theme/pure</span><br></pre></td></tr></table></figure></p>
<p>最後記得 commit：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">"Remove submodule pure theme"</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="簡介">簡介</h3><p>最近為了方便管理專案，將他拆成了好幾個小專案來維護，然後透過參考引入想要的檔案。但 git 沒辦法像 SVN 那樣只單獨下載一個檔案，它必需整個 repository 都 clone 下來，可是整個 clone 下來還要把想要的檔案分別]]>
    </summary>
    
      <category term="git" scheme="http://yiskang.github.io/tags/git/"/>
    
      <category term="Tech" scheme="http://yiskang.github.io/categories/Tech/"/>
    
  </entry>
  
</feed>